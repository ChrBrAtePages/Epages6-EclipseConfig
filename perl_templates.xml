<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template context="perl" description="LogDebug" enabled="true" name="LogDebug">LogDebug( q{${Variable}:}, ${Variable});</template><template context="perl" description="eDoc of an epages package" enabled="true" name="# eDocPackage">#========================================================================================&#13;
# §package      DE_EPAGES::${package}&#13;
# §base         DE_EPAGES::${base}&#13;
# §state        public&#13;
#----------------------------------------------------------------------------------------&#13;
# §description  &#13;
#----------------------------------------------------------------------------------------&#13;
# §example      &#13;
#========================================================================================</template><template context="perl" description="getter/setter method" enabled="true" name="subGetterSetter">sub ${var} {&#13;
    my $$self = shift;&#13;
    my ($$${var}) = @_;&#13;
    return $$self-&gt;{'${var}'} unless (defined($$${var}));&#13;
    $$self-&gt;{'${var}'} = $$${var};&#13;
}</template><template context="perl" description="foreach" enabled="true" name="foreach">foreach my $$${i} (@${list}){&#13;
    ${cursor}&#13;
}</template><template context="perl" description="eDoc of an epages function" enabled="true" name="# eDocFunction">#========================================================================================&#13;
# §function     ${Function}&#13;
# §state        ${public_private}&#13;
#----------------------------------------------------------------------------------------&#13;
# §syntax       ${Function}( $$${Input1} );&#13;
#----------------------------------------------------------------------------------------&#13;
# §description  ${Description}&#13;
#----------------------------------------------------------------------------------------&#13;
# §input        $$${Input1} | ${Input1Description} | ${Input1Type_boolean_integer_String_object_ref_hash_refarray}&#13;
# §return       $$${ReturnVariable} | ${ReturnDescription} | ${ReturnType_boolean_integer_String_object_refhash_refarray}&#13;
#========================================================================================</template><template context="perl" description="subNew" enabled="true" name="subNew">sub new {&#13;
    my $$class = shift;&#13;
    my %args  = @_;&#13;
    my $$self  = bless {}, $$class;&#13;
    return $$self;&#13;
}</template><template context="perl" description="use Core::API::Log" enabled="true" name="useLogDebug">use DE_EPAGES::Core::API::Log qw ( ${LogDebug} ${cursor});</template><template context="perl" description="use Object::API::Factory" enabled="true" name="useFactory">use DE_EPAGES::Object::API::Factory qw ( ${LoadObject} ${LoadClassByAlias} ${cursor});</template><template context="perl" description="use Core::API::Error" enabled="true" name="useError">use DE_EPAGES::Core::API::Error qw ( ExistsError GetError ${cursor});</template><template context="perl" description="useWarning" enabled="true" name="useWarning">use DE_EPAGES::Core::API::Warning qw ( Warning BlockWarnings );</template><template context="perl" description="BlockWarnings" enabled="true" name="BlockWarnings">my $$aWarnings = BlockWarnings( sub {&#13;
    eval {&#13;
        ${cursor}&#13;
    };&#13;
    &#13;
   	Warning(GetError()) if (ExistsError());&#13;
});</template><template context="perl" description="DAL Method" enabled="true" name="LoadClassAndObjects">my $$Class    = LoadClassByAlias('${Classname}');&#13;
my $$a${List}  = $$Class-&gt;getObjects("By${Index}",[$$${Variable}]);</template><template context="perl" description="use PerlTools" enabled="true" name="usePerlTools">use DE_EPAGES::Core::API::PerlTools qw ( ${ElementOf} ${cursor});</template><template context="perl" description="ElementOf" enabled="true" name="ElementOf">ElementOf($$${Element},@${List})</template><template context="perl" description="get my $self" enabled="true" name="mySelfShift">my $$self = shift;</template><template context="perl" description="eval-Block" enabled="true" name="eval">eval {&#13;
    ${cursor}&#13;
};&#13;
if (ExistsError()) {&#13;
    my $$Error = GetError();&#13;
    print STDERR "WARNING: ". substr($$Error-&gt;shortMessage, 0, 4096) . "\n" unless ($$NoOutput);&#13;
    LogError($$Error);&#13;
}</template><template context="perl" description="use feature switch" enabled="true" name="useFeatureSwitch">use feature 'switch';</template><template context="perl" description="sub ErrorDefinition" enabled="true" name="subErrorDefinition">sub ErrorDefinition {&#13;
    return {&#13;
            '${ErrorCode}' =&gt; '${ErrorMessage}',&#13;
    };&#13;
}</template><template context="perl" description="perl package skeleton" enabled="true" name="PackageSkeleton">#========================================================================================&#13;
# §package      DE_EPAGES::${Package}&#13;
# §base         ${Base}&#13;
# §state        public&#13;
# §description  ${Description}&#13;
#========================================================================================&#13;
package DE_EPAGES::${Package};&#13;
use base ${Base};&#13;
&#13;
use strict;&#13;
&#13;
sub ${MySub} {&#13;
    ${cursor}&#13;
}&#13;
&#13;
1;</template><template context="perl" description="use TestParameter" enabled="true" name="useTestParameter">use DE_EPAGES::Core::API::TestParameter qw ( ${TestString} ${cursor});</template><template context="perl" description="use Cartridge::..ExistsCartridgeByPackage" enabled="true" name="useExistsCartridge">use DE_EPAGES::Cartridge::API::Table::Cartridge qw ( ExistsCartridgeByPackage );</template><template context="perl" description="existsCartridge" enabled="true" name="existsCartridge"># make sure that the cartridge is installed&#13;
unless (ExistsCartridgeByPackage('DE_EPAGES::${Cartridge}')) {&#13;
    print 'Store: '.$$StoreName.": Cartridge ${Cartridge} is not installed.\n" if ($$printOutput);&#13;
    return;&#13;
}</template><template context="perl" description="sub with shift self" enabled="true" name="subSelf">sub ${SubName} {&#13;
    my $$self = shift;&#13;
    my (${Arguments}) = @_;&#13;
    ${cursor}&#13;
}</template><template context="perl" description="Transaction" enabled="true" name="Transaction">Transaction(sub {&#13;
    ${cursor}&#13;
});</template><template context="perl" description="use Transaction" enabled="true" name="useTransaction">use DE_EPAGES::Object::API::Factory qw ( Transaction );</template><template context="perl" description="get System Variables" enabled="true" name="getSystemInfo">my $$hInfo = LoadRootObject()-&gt;get([qw( ${cursor} )]);</template><template context="perl" description="public sub with epages API doc" enabled="true" name="subPublic">#========================================================================================&#13;
# §function     ${Function}&#13;
# §state        ${public_private}&#13;
#----------------------------------------------------------------------------------------&#13;
# §syntax       ${Function}( $$${Input1} );&#13;
#----------------------------------------------------------------------------------------&#13;
# §description  ${Description}&#13;
#----------------------------------------------------------------------------------------&#13;
# §input        $$${Input1} | ${Input1Description} | ${Input1Type_boolean_integer_String_object_ref_hash_refarray}&#13;
# §return       $$${ReturnVariable} | ${ReturnDescription} | ${ReturnType_boolean_integer_String_object_refhash_refarray}&#13;
#========================================================================================&#13;
sub ${Function} {&#13;
    my ($$${Input1}) = @_;&#13;
    my $$${ReturnVariable};&#13;
&#13;
    ${cursor}&#13;
    return $$${ReturnVariable};&#13;
}</template><template context="perl" description="get Object attributes into hInfo hash" enabled="true" name="getObjectInfo">my $$hInfo = ${Object}-&gt;get([qw( ${cursor} )]);</template><template context="perl" description="UI function" enabled="true" name="subUIAction">#========================================================================================&#13;
# §function     $$UI-&gt;${UIFunction}($$Servlet)&#13;
# §state        private&#13;
# §description  ${FunctionDescription}&#13;
#========================================================================================&#13;
sub ${UIFunction} {&#13;
    my $$self = shift;&#13;
    my $$Servlet = shift;&#13;
    my $$${Object} = $$Servlet-&gt;object;&#13;
    ${cursor}&#13;
}</template><template context="perl" description="getLog()-&gt;debug()" enabled="true" name="getLogDebug">GetLog()-&gt;debug(${cursor});</template><template context="perl" description="epages api doc §input" enabled="true" name="# §input"># §input        $$${Input1} | ${Input1Description} | ${Input1Type_boolean_integer_String_object_ref_hash_refarray}</template><template context="perl" description="epages api doc §return" enabled="true" name="# §return"># §return       $$${ReturnVariable} | ${ReturnDescription} | ${ReturnType_boolean_integer_String_object_refhash_refarray}</template><template context="perl" description="read $Servlet from argument list" enabled="true" name="myServlet">my ($$Servlet) = @_;</template><template context="perl" description="XML::SAX::Handler for element with getCharacters" enabled="true" name="subSAX_characters"># xml tag &lt;${Element}&gt;&#13;
sub start_${Element} { shift-&gt;collectCharacters(1); } ## no critic (RequireArgUnpacking)&#13;
# xml tag &lt;/${Element}&gt; - fetch characters&#13;
sub end_${Element} {&#13;
    my $$self = shift;&#13;
    my $$Obj = $$self-&gt;topID('${Parent}');&#13;
    $$Obj-&gt;${Element}($$self-&gt;getCharactersEnd());&#13;
}</template><template context="perl" description="empty element" enabled="true" name="subSAX_empty"># xml tag &lt;${Element}&gt; ignored.&#13;
sub start_${Element} {}</template><template context="perl" description="read elements from argument list" enabled="true" name="mySubArgs">my (${Arguments}) = @_;</template><template context="perl" description="stack handling method" enabled="true" name="subStack">sub push${var} {&#13;
    my $$self = shift;&#13;
    my ($$${var}) = @_;&#13;
    push @{$$self-&gt;{'${var}List'}}, $$${var};&#13;
}&#13;
    &#13;
sub pop${var} { &#13;
    my $$self = shift;&#13;
    return pop @{$$self-&gt;{'${var}List'}};&#13;
}&#13;
&#13;
sub ${var}List {&#13;
    my $$self = shift;&#13;
    return $$self-&gt;{'${var}List'}//[];&#13;
}</template><template context="perl" description="XML::SAX::Handler for complex elements" enabled="true" name="subSAX_complex"># xml tag &lt;${Element}&gt;&#13;
sub start_${Element} {&#13;
    my $$self = shift;&#13;
    my ($$Element) = @_;&#13;
    $$self-&gt;pushID('${Element}',DE_EPAGES::AvaTax::API::DTO::${Element}-&gt;new);&#13;
}&#13;
&#13;
#xml tag &lt;/${Element}&gt;&#13;
sub end_${Element} {&#13;
    my $$self = shift;&#13;
    my $$${Element} = $$self-&gt;popID('${Parent}');&#13;
    my $$Obj = $$self-&gt;topID('${Parent}');&#13;
    $$Obj-&gt;${Element}($$${Element});&#13;
    # for root element use:&#13;
    #$$self-&gt;ParseResult($$self-&gt;popID('${Element}'));&#13;
}</template><template context="perl" description="use constant var =&gt; content" enabled="true" name="useconst">use constant ${CONST_NAME} =&gt; ${CONST_CONTENT};</template><template context="perl" description="if" enabled="true" name="if">if (${Condition}) {&#13;
    ${cursor}&#13;
}</template><template context="perl" description="if else" enabled="true" name="ifelse">if (${Condition}) {&#13;
    ${cursor}&#13;
} else {&#13;
    &#13;
}</template><template context="perl" description="perl switch statement" enabled="true" name="givenWhen">given (${Val}) {&#13;
    when (${Statement}) { ${Expr} }&#13;
    ${cursor}&#13;
    default { }&#13;
}</template><template context="perl" description="when case" enabled="true" name="when">when (${String}) {&#13;
    ${cursor}&#13;
}</template><template context="perl" description="TestObject" enabled="true" name="TestObject">TestObject('${Object}',$$${Object},'${Package}::API::Object::${Object}');</template><template context="perl" description="HookFunction" enabled="true" name="HookFunction">#========================================================================================&#13;
# §function     On${Hook}&#13;
# §state        public&#13;
#----------------------------------------------------------------------------------------&#13;
# §syntax       On${Hook}($$hParams);&#13;
#----------------------------------------------------------------------------------------&#13;
# §description  ${Hook} triggered, ${Description}&#13;
#----------------------------------------------------------------------------------------&#13;
# §input        $$hParams | hook arguments, used keys are&#13;
#               &lt;ul&gt;&#13;
#                   &lt;li&gt;Object - object&#13;
#               &lt;/ul&gt; | ref.hash.*&#13;
#========================================================================================&#13;
sub On${Hook} {&#13;
    my ($$hParams) = @_;&#13;
    ${cursor}&#13;
}</template><template context="perl" description="iterate over stringattributes via sql" enabled="true" name="sqlStringAttribute">my $$dbi = GetCurrentDBHandle();&#13;
my $$sql = &lt;&lt;SQL;&#13;
select sa.attributeobjectid, sa.value &#13;
from stringattribute sa&#13;
inner join attribute a on a.attributeid=sa.attributeid&#13;
inner join object co on co.objectid=a.attributeclassid&#13;
inner join object ao on ao.objectid=a.attributeid&#13;
where co.alias='${Class}'&#13;
and ao.alias='${Attribute}'&#13;
SQL&#13;
&#13;
my $$dbResult = $$dbi-&gt;execute($$sql);&#13;
foreach my $$Row (@$$dbResult) {&#13;
    ${cursor}&#13;
}</template><template context="perl" description="use DE_EPAGES::Database::API::Connection" enabled="true" name="useDBI">use DE_EPAGES::Database::API::Connection qw ( GetCurrentDBHandle );</template><template context="perl" description="Frame comment for code structure commentation" enabled="true" name="# Frame Comment">#---------------------------------------------------------------------------
#  ${cursor}
#---------------------------------------------------------------------------</template><template context="perl" description="POD block from begin to end" enabled="true" name="=pod / =cut">=pod

${cursor}

=cut</template><template context="perl" description="End of POD block" enabled="true" name="=cut">=cut

${cursor}</template><template context="perl" description="Formatting region text/code/data" enabled="true" name="=for / =cut">=for ${formatname}

${cursor}

=end ${formatname}</template><template context="perl" description="HTML documentation" enabled="true" name="=begin html / =end">=begin  html

${cursor}

=end    html  #  back to Perl</template><template context="perl" description="man pages documentation" enabled="true" name="=begin man / =end">=begin  man 

${cursor}

=end    man   #  back to Perl</template><template context="perl" description="plain text documentation" enabled="true" name="=begin text / =end">=begin  text

${cursor}

=end    text  #  back to Perl</template><template context="perl" description="headline 1" enabled="true" name="=head1">=head1 ${cursor}</template><template context="perl" description="headline 2" enabled="true" name="=head2">=head2 ${cursor}</template><template context="perl" description="headline 3" enabled="true" name="=head3">=head3 ${cursor}</template><template context="perl" description="list" enabled="true" name="=over .. =back">=over ${indent level}

=item *

${cursor}

=item *



=back</template><template context="perl" description="list item" enabled="true" name="=item *">=item *

${cursor}</template><template context="perl" description="bold" enabled="true" name="= B&lt;&gt;">B&lt;${cursor}&gt;</template><template context="perl" description="literal" enabled="true" name="= C&lt;&gt;">C&lt;${cursor}&gt;</template><template context="perl" description="escape" enabled="true" name="= E&lt;&gt;">E&lt;${cursor}&gt;</template><template context="perl" description="filename" enabled="true" name="= F&lt;&gt;">F&lt;${cursor}&gt;</template><template context="perl" description="italic" enabled="true" name="= I&lt;&gt;">I&lt;${cursor}&gt;</template><template context="perl" description="link" enabled="true" name="= L&lt;&gt;">L&lt;${cursor}|&gt;</template><template context="perl" description="nobr. spaces" enabled="true" name="= S&lt;&gt;">S&lt;${cursor}&gt;</template><template context="perl" description="index" enabled="true" name="= X&lt;&gt;">X&lt;${cursor}&gt;</template><template context="perl" description="zero-width" enabled="true" name="= Z&lt;&gt;">Z&lt;${cursor}&gt;</template><template context="perl" description="do while loop" enabled="true" name="do-while">do {
    ${cursor}
} 
while ( ${condition} );</template><template context="perl" description="for loop" enabled="true" name="for">for ( ${begin}; ${condition}; ${end} ) {
    ${cursor}
}</template><template context="perl" description="unless condition" enabled="true" name="unless">unless ( ${condition} ) {
    ${cursor}
}</template><template context="perl" description="unless else condition" enabled="true" name="unless-else">unless ( ${condition} ) {
    ${cursor}
} else {
    
}</template><template context="perl" description="until-loop" enabled="true" name="until">until ( ${condition} ) {
	${cursor}
}</template><template context="perl" description="while loop" enabled="true" name="while">while ( ${condition} ) {
    ${cursor}
}</template><template context="perl" description="Scalar declaration" enabled="true" name="my $scalar">my $$${scalar}</template><template context="perl" description="Scalar definition" enabled="true" name="my $scalar = value">my $$${scalar} = ${value};</template><template context="perl" description="List of scalars definition" enabled="true" name="my ($scalar1, $scalar2, $scalar3);">my ($$${scalar1}, $$${scalar2}, $$${scalar3} );</template><template context="perl" description="Array declaration" enabled="true" name="my array">my @${array};</template><template context="perl" description="Array definition" enabled="true" name="my array = ()">my @${array} = (${values});</template><template context="perl" description="hash declaration" enabled="true" name="my %">my %${hash};</template><template context="perl" description="hash definition" enabled="true" name="my %hash = ( )">my %${hash}=(
    '${key1}'  =&gt; ${value1},
    ${cursor}
);</template><template context="perl" description="hash reference definition" enabled="true" name="my $hashref = {}">my $$h${Hash} = {
    '${Key1}' =&gt; ${Value1},
    ${cursor}
};</template><template context="perl" description="Test regular expression" enabled="true" name="regex match">$${var} =~ m/${regex}/</template><template context="perl" description="Test regular expression" enabled="true" name="regex missmatch">$${var} !~ m/${regex}/</template><template context="perl" description="Replace with regular expression" enabled="true" name="regex replace">$$${var} =~ s/${reg_search}/${reg_replace}/</template><template context="perl" description="Replace with transliteration" enabled="true" name="transliteration">$$${var} =~ tr/${source}/${replace}/</template><template context="perl" description="Subroutine" enabled="true" name="sub">sub ${name} {
    my ($$${Arguments}) = @_;
    ${cursor}
}</template><template context="perl" description="Open input file" enabled="true" name="open input file">my	$$INFILE_filename = '${filename}'; # input file name

open ( INFILE, '&lt;', $$INFILE_filename )
or die  "$$0 : failed to open  input file $$INFILE_filename : $$!\n";


close ( INFILE )
	or warn "$$0 : failed to close input file $$INFILE_filename : $$!\n";</template><template context="perl" description="Open output file" enabled="true" name="open output file">my	$$OUTFILE_filename = '${filename}'; # output file name

open ( OUTFILE, '&gt;', $$OUTFILE_filename ) or 
	die  "$$0 : failed to open  output file $$OUTFILE_filename : $$!\n";


close ( OUTFILE )
	or warn "$$0 : failed to close output file $$OUTFILE_filename : $$!\n";</template><template context="perl" description="Open pipe" enabled="true" name="open pipe">my	$$PIPE_command = '${pipecommand}'; # pipe command

open ( PIPE, $$PIPE_command )
	or die  "$$0 : failed to open  pipe &gt; $$PIPE_command &lt; : $$!\n";


close ( PIPE )
	or warn "$$0 : failed to close pipe &gt; $$PIPE_command &lt; : $$!\n";</template><template context="perl" description="Assign a here document to a variable" enabled="true" name="heredoc">my $$${herevar} = &lt;&lt;${HEREMARK};
${cursor}
${HEREMARK}</template><template context="perl" description="The time at which the script began running, in seconds since the epoch." enabled="true" name="$^T ">$$^T</template><template context="perl" description="The time at which the script began running, in seconds since the epoch." enabled="true" name="$BASETIME (long version)">$$BASETIME</template><template context="perl" description="The time at which the script began running, in seconds since the epoch." enabled="true" name="$BASETIME (short version)">$$^T</template><template context="perl" description="Name of the Perl script file name being executed." enabled="true" name="$0">$$0</template><template context="perl" description="Name of the Perl script file name being executed." enabled="true" name="$PROGRAM_NAME (long version)">$$PROGRAM_NAME</template><template context="perl" description="Name of the Perl script file name being executed." enabled="true" name="$PROGRAM_NAME (short version)">$$0</template><template context="perl" description="Current value of the write accumulator for format lines. " enabled="true" name="$^A">$$^A</template><template context="perl" description="Current value of the write accumulator for format lines. " enabled="true" name="$ACCUMULATOR (long version)">$$ACCUMULATOR</template><template context="perl" description="Current value of the write accumulator for format lines. " enabled="true" name="$ACCUMULATOR (short version)">$$^A</template><template context="perl" description="Default input and pattern searching variable." enabled="true" name="$_">$$_</template><template context="perl" description="Default input and pattern searching variable." enabled="true" name="$ARG (long version)">$$ARG</template><template context="perl" description="Default input and pattern searching variable." enabled="true" name="$ARG (short version)">$$_</template><template context="perl" description="The array containing the command-line arguments intended for the script. " enabled="true" name="@ARGV">@ARGV</template><template context="perl" description="Current value of the debugging flags." enabled="true" name="$^D">$$^D</template><template context="perl" description="Current value of the debugging flags." enabled="true" name="$DEBUGGING (long version)">$$DEBUGGING</template><template context="perl" description="Current value of the debugging flags." enabled="true" name="$DEBUGGING (short version)">$$^D</template><template context="perl" description="Effective gid of this process." enabled="true" name="$)">$$)</template><template context="perl" description="Effective gid of this process" enabled="true" name="$EFFECTIVE_GROUP_ID (long version)">$$EFFECTIVE_GROUP_ID</template><template context="perl" description="Effective gid of this process" enabled="true" name="$EFFECTIVE_GROUP_ID (short version)">$$)</template><template context="perl" description="Effective gid of this process" enabled="true" name="$EGID (long version)">$EGID)</template><template context="perl" description="Effective gid of this process" enabled="true" name="$EGID (short version)">$$)</template><template context="perl" description="Effective uid of this process." enabled="true" name="$&gt;">$$&gt;</template><template context="perl" description="Effective uid of this process." enabled="true" name="$EFFECTIVE_USER_ID (long version)">$$EFFECTIVE_USER_ID</template><template context="perl" description="Effective uid of this process." enabled="true" name="$EFFECTIVE_USER_ID (short version)">$$&gt;</template><template context="perl" description="Effective uid of this process." enabled="true" name="$EUID (long version)">$$EUID</template><template context="perl" description="Effective uid of this process." enabled="true" name="$EUID (short version)">$$&gt;</template><template context="perl" description="line number of the last file handle that was read.'" enabled="true" name="$.'">$$.</template><template context="perl" description="line number of the last file handle that was read.'" enabled="true" name="$INPUT_LINE_NUMBER (long version)">'$$.'</template><template context="perl" description="line number of the last file handle that was read.'" enabled="true" name="$INPUT_LINE_NUMBER (short version)">'Current</template><template context="perl" description="Current line number of the last file handle that was read." enabled="true" name="$NR (long version)">$$NR</template><template context="perl" description="Current line number of the last file handle that was read." enabled="true" name="$. (short version)">$$.</template><template context="perl" description="Output field separator for the print operator" enabled="true" name="$,">$$,</template><template context="perl" description="Output field separator for the print operator" enabled="true" name="$OUTPUT_FIELD_SEPARATOR (long version)">$$OUTPUT_FIELD_SEPARATOR</template><template context="perl" description="Output field separator for the print operator" enabled="true" name="$OUTPUT_FIELD_SEPARATOR (short version)">$$,</template><template context="perl" description="Output field separator for the print operator" enabled="true" name="$OFS (long version)">$$OFS</template><template context="perl" description="Output field separator for the print operator" enabled="true" name="$OFS (short version)">$$,</template><template context="perl" description="Input separator. Default=newline." enabled="true" name="$/">$$/</template><template context="perl" description="Input separator. Default=newline." enabled="true" name="$INPUT_RECORD_SEPARATOR (long version)">$$INPUT_RECORD_SEPARATOR</template><template context="perl" description="Input separator. Default=newline." enabled="true" name="$INPUT_RECORD_SEPARATOR (short version)">$$/</template><template context="perl" description="Input separator. Default=newline." enabled="true" name="$RS (long version)">$$RS</template><template context="perl" description="Input separator. Default=newline." enabled="true" name="$RS (short version)">$$/</template><template context="perl" description="Output record separator. Default=newline" enabled="true" name="$ ">$$</template><template context="perl" description="Output record separator. Default=newline" enabled="true" name="$OUTPUT_RECORD_SEPARATOR (long version)">$$OUTPUT_RECORD_SEPARATOR</template><template context="perl" description="Output record separator. Default=newline" enabled="true" name="$OUTPUT_RECORD_SEPARATOR (short version)">$$\</template><template context="perl" description="Output record separator. Default=newline" enabled="true" name="$ORS (long version)">$$ORS</template><template context="perl" description="Output record separator. Default=newline" enabled="true" name="$ORS (short version)">$$</template><template context="perl" description="Applies to list values interpolated into a double quoted string" enabled="true" name="$LIST_SEPARATOR">$$LIST_SEPARATOR;</template><template context="perl" description="Subscript separator for multidimensional array emulation. Default=034." enabled="true" name="$;">$$;</template><template context="perl" description="Subscript separator for multidimensional array emulation. Default=034." enabled="true" name="$SUBSCRIPT_SEPARATOR (long version)">$$SUBSCRIPT_SEPARATOR</template><template context="perl" description="Subscript separator for multidimensional array emulation. Default=034." enabled="true" name="$SUBSCRIPT_SEPARATOR (short version)">$$;</template><template context="perl" description="Subscript separator for multidimensional array emulation. Default=034." enabled="true" name="$SUBSEP (long version)">$$SUBSEP</template><template context="perl" description="Subscript separator for multidimensional array emulation. Default=034." enabled="true" name="$SUBSEP (short version)">$$;</template><template context="perl" description="Format output character for formfeed. Default=f." enabled="true" name="$^L">$$^L</template><template context="perl" description="Format output character for formfeed. Default=f." enabled="true" name="$FORMAT_FORMFEED (long version)">$$FORMAT_FORMFEED</template><template context="perl" description="Format output character for formfeed. Default=f." enabled="true" name="$FORMAT_FORMFEED (short version)">$$^L</template><template context="perl" description="Set of characters meaning a line break (next line starting with ^)in a format. Default=n." enabled="true" name="$:">$$:</template><template context="perl" description="Set of characters meaning a line break (next line starting with ^)in a format. Default=n." enabled="true" name="$FORMAT_LINE_BREAK_CHARACTERS (long version)">$$FORMAT_LINE_BREAK_CHARACTERS</template><template context="perl" description="Set of characters meaning a line break (next line starting with ^)in a format. Default=n." enabled="true" name="$FORMAT_LINE_BREAK_CHARACTERS (short version)">$$:</template><template context="perl" description="Output format for printed numbers (deprecated)." enabled="true" name="$#">$$#</template><template context="perl" description="Output format for printed numbers (deprecated)." enabled="true" name="$OFMT (long version)">$$OFMT</template><template context="perl" description="Output format for printed numbers (deprecated)." enabled="true" name="$OFMT (short version)">$$#</template><template context="perl" description="Return value from last pipe close, backtick (``) command, system operator." enabled="true" name="$?">$$?</template><template context="perl" description="Return value from last pipe close, backtick (``) command, system operator." enabled="true" name="$CHILD_ERROR (long version)">$$CHILD_ERROR</template><template context="perl" description="Return value from last pipe close, backtick (``) command, system operator." enabled="true" name="$CHILD_ERROR (short version)">$$?</template><template context="perl" description="Last System Error; Numeric context: errno no; string context: system error string." enabled="true" name="$!">$$!</template><template context="perl" description="Last System Error: Numeric context: errno no; string context: system error string." enabled="true" name="$ERRNO (long version)">$$ERRNO</template><template context="perl" description="Last System Error: Numeric context: errno no; string context: system error string." enabled="true" name="$ERRNO (short version)">$$!</template><template context="perl" description="Last System Error; Numeric context: errno no; string context: system error string." enabled="true" name="$OS_ERROR (long version)">$$OS_ERROR</template><template context="perl" description="Last System Error; Numeric context: errno no; string context: system error string." enabled="true" name="$OS_ERROR (short version)">$$!</template><template context="perl" description="Syntax error message from the last eval command" enabled="true" name="$@">$$@</template><template context="perl" description="Syntax error message from the last eval command" enabled="true" name="$EVAL_ERROR (long version)">$$EVAL_ERROR</template><template context="perl" description="Syntax error message from the last eval command" enabled="true" name="$EVAL_ERROR (short version)">$$@</template><template context="perl" description="The pid of the running perl this script." enabled="true" name="$$">$$$$</template><template context="perl" description="The pid of the running perl this script." enabled="true" name="$PROCESS_ID (long version)">$$PROCESS_ID</template><template context="perl" description="The pid of the running perl this script." enabled="true" name="$PROCESS_ID (short version)">$$$$</template><template context="perl" description="The pid of the running perl this script." enabled="true" name="$PID (long version)">$$PID</template><template context="perl" description="The pid of the running perl this script." enabled="true" name="$PID (short version)">$$$$</template><template context="perl" description="Real user ID (uid) of running perl script." enabled="true" name="$&lt;">$$&lt;</template><template context="perl" description="Real user ID (uid) of running perl script." enabled="true" name="$REAL_USER_ID (long version)">$$REAL_USER_ID</template><template context="perl" description="Real user ID (uid) of running perl script." enabled="true" name="$REAL_USER_ID (short version)">$$&lt;</template><template context="perl" description="Real user ID (uid) of running perl script." enabled="true" name="$UID (long version)">$$UID</template><template context="perl" description="Real user ID (uid) of running perl script." enabled="true" name="$UID (short version)">$$&lt;</template><template context="perl" description="Real group ID (gid) of running perl script." enabled="true" name="$(">$$(</template><template context="perl" description="Real group ID (gid) of running perl script." enabled="true" name="$REAL_GROUP_ID (long version)">$$REAL_GROUP_ID</template><template context="perl" description="Real group ID (gid) of running perl script." enabled="true" name="$REAL_GROUP_ID (short version)">$$(</template><template context="perl" description="Real group ID (gid) of running perl script." enabled="true" name="$GID (long version)">$$GID</template><template context="perl" description="Real group ID (gid) of running perl script." enabled="true" name="$GID (short version)">$$(</template><template context="perl" description="Index of the first element in an array / the first character in a substring. Default=0" enabled="true" name="$[">$$[</template><template context="perl" description="Perl version plus patchlevel divided by 1000." enabled="true" name="$]">$$]</template><template context="perl" description="The revision, version, and subversion of the Perl interpreter" enabled="true" name="$^V">$^V</template><template context="perl" description="The revision, version, and subversion of the Perl interpreter" enabled="true" name="$PERL_VERSION (long version)">$$PERL_VERSION</template><template context="perl" description="The revision, version, and subversion of the Perl interpreter" enabled="true" name="$PERL_VERSION (short version)">$^V</template><template context="perl" description="Extended error message (platform depending)." enabled="true" name="$^E">$$^E</template><template context="perl" description="Extended error message (platform depending)." enabled="true" name="$EXTENDED_OS_ERROR (long version)">$$EXTENDED_OS_ERROR</template><template context="perl" description="Extended error message (platform depending)." enabled="true" name="$EXTENDED_OS_ERROR (short version)">$$^E</template><template context="perl" description="Maximum system file descriptor." enabled="true" name="$^F">$$^F</template><template context="perl" description="Maximum system file descriptor." enabled="true" name="$SYSTEM_FD_MAX (long version)">$$SYSTEM_FD_MAX</template><template context="perl" description="Maximum system file descriptor." enabled="true" name="$SYSTEM_FD_MAX (short version)">$$^F</template><template context="perl" description="Internal compiler hints enabled by some modules. " enabled="true" name="$^H">$$^H</template><template context="perl" description="Value of the inplace-edit extension. Use undef to disable inplace editing." enabled="true" name="$^I">$$^I</template><template context="perl" description="Value of the inplace-edit extension. Use undef to disable inplace editing." enabled="true" name="$INPLACE_EDIT (long version)">$$INPLACE_EDIT</template><template context="perl" description="Value of the inplace-edit extension. Use undef to disable inplace editing." enabled="true" name="$INPLACE_EDIT (short version)">$$^I</template><template context="perl" description="Contents can be used as an emergency memory pool in case of out-of-memory error. Requires a special compilation of Perl." enabled="true" name="$^M">$$^M</template><template context="perl" description="Name of the operating ystem Perl binary was compiled for." enabled="true" name="$^O">$$^O</template><template context="perl" description="Name of the operating ystem Perl binary was compiled for." enabled="true" name="$OSNAME (long version)">$$OSNAME</template><template context="perl" description="Name of the operating ystem Perl binary was compiled for." enabled="true" name="$OSNAME (short version)">$$^O</template><template context="perl" description="Internal flag, cleared by debugger to not debug itself." enabled="true" name="$^P">$$^P</template><template context="perl" description="Internal flag, cleared by debugger to not debug itself." enabled="true" name="$PERLDB (long version)">$$PERLDB</template><template context="perl" description="Internal flag, cleared by debugger to not debug itself." enabled="true" name="$PERLDB (short version)">$$^P</template><template context="perl" description="The result of evaluation of the last successful (?{ code }) regular expression assertion." enabled="true" name="$^R">$$^R</template><template context="perl" description="The result of evaluation of the last successful (?{ code }) regular expression assertion." enabled="true" name="$LAST_REGEXP_CODE_RESULT (long version)">$$LAST_REGEXP_CODE_RESULT</template><template context="perl" description="The result of evaluation of the last successful (?{ code }) regular expression assertion." enabled="true" name="$LAST_REGEXP_CODE_RESULT (short version)">$$^R</template><template context="perl" description="Current state of the interpreter." enabled="true" name="$^S">$$^S</template><template context="perl" description="Current state of the interpreter." enabled="true" name="$EXCEPTIONS_BEING_CAUGHT (long version)">$$EXCEPTIONS_BEING_CAUGHT</template><template context="perl" description="Current state of the interpreter." enabled="true" name="$EXCEPTIONS_BEING_CAUGHT (short version)">$$^S</template><template context="perl" description="The current value of the warning switch, either true or false." enabled="true" name="$^W">$$^W</template><template context="perl" description="The current value of the warning switch, either true or false." enabled="true" name="$WARNING (long version)">$$WARNING</template><template context="perl" description="The current value of the warning switch, either true or false." enabled="true" name="$WARNING (short version)">$$^W</template><template context="perl" description="Perls name that itself was executed as." enabled="true" name="$^X">$$^X</template><template context="perl" description="Perls name that itself was executed as." enabled="true" name="$EXECUTABLE_NAME (long version)">$$EXECUTABLE_NAME</template><template context="perl" description="Perls name that itself was executed as." enabled="true" name="$EXECUTABLE_NAME (short version)">$$^X</template><template context="perl" description="Name of the current file when reading from &lt;ARGV&gt;." enabled="true" name="$ARGV">$$ARGV</template><template context="perl" description="List of library directories, used by do, require, or use constructs. " enabled="true" name="@INC">@INC</template><template context="perl" description="Hash containing filename of each file that has been included by do or require." enabled="true" name="%INC">%INC</template><template context="perl" description="Array into which the input lines are split when the -a command-line switch is given. " enabled="true" name="@F">@F</template><template context="perl" description="Hash containing current environment variables." enabled="true" name="%ENV">%ENV</template><template context="perl" description="Hash used to set signal handlers for various signals." enabled="true" name="%SIG">%SIG</template><template context="perl" description="Value of the default handler for a signal" enabled="true" name="handler DEFAULT">DEFAULT</template><template context="perl" description="Value of the default handler for a signal" enabled="true" name="DEFAULT">DEFAULT</template><template context="perl" description="Signal handler value to ignore the signal" enabled="true" name="handler IGNORE">IGNORE</template><template context="perl" description="Signal handler value to ignore the signal" enabled="true" name="IGNORE">IGNORE</template><template context="perl" description="POSIX signal End process (abort). Example: $SIG{ABRT}='my_sigabrt_handler';" enabled="true" name="signal (POSIX) ABRT">ABRT</template><template context="perl" description="POSIX signal Alarm clock. Example: $SIG(ALRM)='my_sigalrm_handler'" enabled="true" name="signal (POSIX) ALRM">ALRM</template><template context="perl" description="POSIX signal Example: $SIG(CHLD). Example: $SIG(CHLD)='my_sigchld_handler'" enabled="true" name="signal (POSIX) CHLD">CHLD</template><template context="perl" description="POSIX signal Example: $SIG(CONT)='my_sigcont_handler'" enabled="true" name="signal (POSIX) CONT">CONT</template><template context="perl" description="POSIX signal Floating-point exception. Example: $SIG(FPE)='my_sigfpe_handler'" enabled="true" name="signal (POSIX) FPE">FPE</template><template context="perl" description="POSIX signal Hangup. Example: $SIG(HUP)='my_sighup_handler'" enabled="true" name="signal (POSIX) HUP">HUP</template><template context="perl" description="POSIX signal Illegal instruction. Example: $SIG(ILL)='my_sigill_handler'" enabled="true" name="signal (POSIX) ILL">ILL</template><template context="perl" description="POSIX signal Interrupt. Example: $SIG(INT)='my_sigint_handler'" enabled="true" name="signal (POSIX) INT">INT</template><template context="perl" description="POSIX signal Kill (cannot be caught or ignored)." enabled="true" name="signal (POSIX) KILL">KILL</template><template context="perl" description="POSIX signal Write on a pipe when there is no process to read it. Example: $SIG(PIPE)='my_sigpipe_handler'" enabled="true" name="signal (POSIX) PIPE">PIPE</template><template context="perl" description="POSIX signal Quit. Example: $SIG(QUIT)='my_sigquit_handler'" enabled="true" name="signal (POSIX) QUIT">QUIT</template><template context="perl" description="POSIX signal Segmentation violation. Example: $SIG(SEGV)='my_sigsegv_handler'" enabled="true" name="signal (POSIX) SEGV">SEGV</template><template context="perl" description="POSIX signal Stop (cannot be caught or ignored)." enabled="true" name="signal (POSIX) STOP">STOP</template><template context="perl" description="POSIX signal Software termination signal. Example: $SIG(TERM)='my_sigterm_handler'" enabled="true" name="signal (POSIX) TERM">TERM</template><template context="perl" description="POSIX signal Interactive stop. Example: $SIG(TSTP)='my_sigtstp_handler'" enabled="true" name="signal (POSIX) TSTP">TSTP</template><template context="perl" description="POSIX signal Background read attempted from control terminal. Example: $SIG(TTIN)='my_sigttin_handler'" enabled="true" name="signal (POSIX) TTIN">TTIN</template><template context="perl" description="POSIX signal Background write attempted from control terminal. Example: $SIG(TTOU)='my_sigttou_handler'" enabled="true" name="signal (POSIX) TTOU">TTOU</template><template context="perl" description="POSIX signal User-defined signal 1. Example: $SIG(USR1)='my_sigusr1_handler'" enabled="true" name="signal (POSIX) USR1">USR1</template><template context="perl" description="POSIX signal User-defined signal 2. Example: $SIG(USR2)='my_sigusr2_handler'" enabled="true" name="signal (POSIX) USR2">USR2</template><template context="perl" description="Filehandle that iterates over command line filenames in @ARGV. Usually written as the null filehandle in &lt;&gt;." enabled="true" name="&lt;ARGV&gt;">&lt;ARGV&gt;</template><template context="perl" description="Standard error output stream" enabled="true" name="&lt;STDERR&gt;">&lt;STDERR&gt;</template><template context="perl" description="Standard input stream" enabled="true" name="&lt;STDIN&gt;">&lt;STDIN&gt;</template><template context="perl" description="Standard output stream" enabled="true" name="&lt;STDOUT&gt;">&lt;STDOUT&gt;</template><template context="perl" description="The special filehandle that refers to anything following the __END__ token in the file containing the script." enabled="true" name="&lt;DATA&gt;">&lt;DATA&gt;</template><template context="perl" description="Contains the text matched by the corresponding set of parentheses in the last pattern matched." enabled="true" name="$digit">$$digit</template><template context="perl" description="The string matched by the last successful pattern match." enabled="true" name="$&amp;">$$&amp;</template><template context="perl" description="The string matched by the last successful pattern match." enabled="true" name="$MATCH (long version)">$$MATCH</template><template context="perl" description="The string matched by the last successful pattern match." enabled="true" name="$MATCH (short version)">$$&amp;</template><template context="perl" description="The string preceding whatever was matched by the last successful pattern match." enabled="true" name="$`">$$`</template><template context="perl" description="The string preceding whatever was matched by the last successful pattern match." enabled="true" name="$PREMATCH (long version)">$$PREMATCH</template><template context="perl" description="The string preceding whatever was matched by the last successful pattern match." enabled="true" name="$PREMATCH (short version)">$$`</template><template context="perl" description="The string following whatever was matched by the last successful pattern match." enabled="true" name="$'">$$'</template><template context="perl" description="The string following whatever was matched by the last successful pattern match." enabled="true" name="$POSTMATCH (long version)">$$POSTMATCH</template><template context="perl" description="The string following whatever was matched by the last successful pattern match." enabled="true" name="$POSTMATCH (short version)">$$'</template><template context="perl" description="The last bracket matched by the last search pattern." enabled="true" name="$+">$$+</template><template context="perl" description="The last bracket matched by the last search pattern." enabled="true" name="$LAST_PAREN_MATCH (long version)">$$LAST_PAREN_MATCH</template><template context="perl" description="The last bracket matched by the last search pattern." enabled="true" name="$LAST_PAREN_MATCH (short version)">$$+</template><template context="perl" description="If set to nonzero, forces an fflush(3) after every write or print on the currently selected output channel." enabled="true" name="$|">$$|</template><template context="perl" description="If set to nonzero, forces an fflush(3) after every write or print on the currently selected output channel." enabled="true" name="$OUTPUT_AUTOFLUSH (long version)">$$OUTPUT_AUTOFLUSH</template><template context="perl" description="If set to nonzero, forces an fflush(3) after every write or print on the currently selected output channel." enabled="true" name="$OUTPUT_AUTOFLUSH (short version)">$$|</template><template context="perl" description="The current page number of the currently selected output channel." enabled="true" name="$%">$$%</template><template context="perl" description="The current page number of the currently selected output channel." enabled="true" name="$FORMAT_PAGE_NUMBER (long version)">$$FORMAT_PAGE_NUMBER</template><template context="perl" description="The current page number of the currently selected output channel." enabled="true" name="$FORMAT_PAGE_NUMBER (short version)">$$%</template><template context="perl" description="The current page length (printable lines) of the currently selected output channel. Default is 60." enabled="true" name="$=">$$=</template><template context="perl" description="The current page length (printable lines) of the currently selected output channel. Default is 60." enabled="true" name="$FORMAT_LINES_PER_PAGE (long version)">$$FORMAT_LINES_PER_PAGE</template><template context="perl" description="The current page length (printable lines) of the currently selected output channel. Default is 60." enabled="true" name="$FORMAT_LINES_PER_PAGE (short version)">$$=</template><template context="perl" description="The number of lines left on the page of the currently selected output channel." enabled="true" name="$-">$$-</template><template context="perl" description="The number of lines left on the page of the currently selected output channel." enabled="true" name="$FORMAT_LINES_LEFT (long version)">$$FORMAT_LINES_LEFT</template><template context="perl" description="The number of lines left on the page of the currently selected output channel." enabled="true" name="$FORMAT_LINES_LEFT (short version)">$$-</template><template context="perl" description="The name of the current report format for the currently selected output channel. Default is the name of the filehandle." enabled="true" name="$~">$$~</template><template context="perl" description="The name of the current report format for the currently selected output channel. Default is the name of the filehandle." enabled="true" name="$FORMAT_NAME (long version)">$$FORMAT_NAME</template><template context="perl" description="The name of the current report format for the currently selected output channel. Default is the name of the filehandle." enabled="true" name="$FORMAT_NAME (short version)">$$~</template><template context="perl" description="The name of the current top-of-page format for the currently selected output channel. Default is the name of the filehandle with _TOP appended." enabled="true" name="$^">$$^</template><template context="perl" description="The name of the current top-of-page format for the currently selected output channel. Default is the name of the filehandle with _TOP appended." enabled="true" name="$FORMAT_TOP_NAME (long version)">$$FORMAT_TOP_NAME</template><template context="perl" description="The name of the current top-of-page format for the currently selected output channel. Default is the name of the filehandle with _TOP appended." enabled="true" name="$FORMAT_TOP_NAME (short version)">$$^</template><template context="perl" description="Array holds the offsets of the ends of the last successful submatches." enabled="true" name="@+">$@+</template><template context="perl" description="Array holds the offsets of the ends of the last successful submatches." enabled="true" name="@LAST_MATCH_END (long version)">$@LAST_MATCH_END</template><template context="perl" description="Array holds the offsets of the ends of the last successful submatches." enabled="true" name="@LAST_MATCH_END (short version)">$@+</template><template context="perl" description="Offsets of the start of the substring matched by each subpatterns." enabled="true" name="@-">$@-</template><template context="perl" description="Offsets of the start of the substring matched by each subpatterns." enabled="true" name="@LAST_MATCH_START (long version)">$@LAST_MATCH_START</template><template context="perl" description="Offsets of the start of the substring matched by each subpatterns." enabled="true" name="@LAST_MATCH_START (short version)">$@-</template><template context="perl" description="Standard print command" enabled="true" name="print">print "${cursor}\n";</template><template context="perl" description="printf command" enabled="true" name="printf">printf ("${cursor}\n", ${Arguments});</template><template context="perl" description="Any alphanumeric, that is, an alpha or a digit." enabled="true" name="character class [:alnum:]">[:alnum:]</template><template context="perl" description="Any letter. (That's a lot more letters than you think, unless you're thinking Unicode, in which case it's still a lot.)" enabled="true" name="character class [:alpha:]">[:alpha:]</template><template context="perl" description="Any character with an ordinal value between 0 and 127." enabled="true" name="character class [:ascii:]">[:ascii:]</template><template context="perl" description="Any control character. " enabled="true" name="character class [:cntrl:]">[:cntrl:]</template><template context="perl" description="A character representing a decimal digit, such as 0 to 9. " enabled="true" name="character class [:digit:]">[:digit:]</template><template context="perl" description="Any alphanumeric or punctuation character.Any alphanumeric or punctuation character." enabled="true" name="character class [:graph:]">[:graph:]</template><template context="perl" description="A lowercase letter." enabled="true" name="character class [:lower:]">[:lower:]</template><template context="perl" description="Any alphanumeric or punctuation character or space." enabled="true" name="character class [:print:]">[:print:]</template><template context="perl" description="Any punctuation character." enabled="true" name="character class [:punct:]">[:punct:]</template><template context="perl" description="Any space character. Includes tab, newline, form feed, and carriage return.Any uppercase " enabled="true" name="character class [:space:]">[:space:]</template><template context="perl" description="Any uppercase letter" enabled="true" name="character class [:upper:]">[:upper:]</template><template context="perl" description="Any identifier character, either an alnum or underline." enabled="true" name="character class [:word:]">[:word:]</template><template context="perl" description="Any hexadecimal digit. Though this may seem silly ([0-9a-fA-F] works just fine)" enabled="true" name="character class [:xdigit:]">[:xdigit:]</template><template context="perl" description="Any alphanumeric, that is, an alpha or a digit." enabled="true" name="class [:alnum:]">[:alnum:]</template><template context="perl" description="Any letter. (That's a lot more letters than you think, unless you're thinking Unicode, in which case it's still a lot.)" enabled="true" name="class [:alpha:]">[:alpha:]</template><template context="perl" description="Any character with an ordinal value between 0 and 127." enabled="true" name="class [:ascii:]">[:ascii:]</template><template context="perl" description="Any control character. " enabled="true" name="class [:cntrl:]">[:cntrl:]</template><template context="perl" description="A character representing a decimal digit, such as 0 to 9. " enabled="true" name="class [:digit:]">[:digit:]</template><template context="perl" description="Any alphanumeric or punctuation character.Any alphanumeric or punctuation character." enabled="true" name="class [:graph:]">[:graph:]</template><template context="perl" description="A lowercase letter." enabled="true" name="class [:lower:]">[:lower:]</template><template context="perl" description="Any alphanumeric or punctuation character or space." enabled="true" name="class [:print:]">[:print:]</template><template context="perl" description="Any punctuation character." enabled="true" name="class [:punct:]">[:punct:]</template><template context="perl" description="Any space character. Includes tab, newline, form feed, and carriage return.Any uppercase " enabled="true" name="class [:space:]">[:space:]</template><template context="perl" description="Any uppercase letter" enabled="true" name="class [:upper:]">[:upper:]</template><template context="perl" description="Any identifier character, either an alnum or underline." enabled="true" name="class [:word:]">[:word:]</template><template context="perl" description="Any hexadecimal digit. Though this may seem silly ([0-9a-fA-F] works just fine)" enabled="true" name="class [:xdigit:]">[:xdigit:]</template><template context="perl" description="Test: file age since inode change" enabled="true" name="test: file age since inode change">-C</template><template context="perl" description="Test: file age since last access" enabled="true" name="test: file age since last access">-A</template><template context="perl" description="Test: file age since modification" enabled="true" name="test: file age since modification">-M</template><template context="perl" description="Test: file is binary file" enabled="true" name="test: file is binary file">-B</template><template context="perl" description="Test: file is block special file" enabled="true" name="test: file is block special file">-b</template><template context="perl" description="Test: file is character special file" enabled="true" name="test: file is character special file">-c</template><template context="perl" description="Test: file is directory" enabled="true" name="test: file is directory">-d</template><template context="perl" description="Test: file is plain file" enabled="true" name="test: file is plain file">-f</template><template context="perl" description="Test: file is named pipe" enabled="true" name="test: file is named pipe">-p</template><template context="perl" description="Test: file is text file" enabled="true" name="test: file is text file">-T</template><template context="perl" description="Test: file is socket" enabled="true" name="test: file is socket">-S</template><template context="perl" description="Test: file is symbolic link" enabled="true" name="test: file is symbolic link">-l</template><template context="perl" description="Test: file is readable by eff. UID/GID" enabled="true" name="test: file is readable by eff. UID/GID">-r</template><template context="perl" description="Test: file is readable by real UID/GID" enabled="true" name="test: file is readable by real UID/GID">-R</template><template context="perl" description="Test: file is writable by eff. UID/GID" enabled="true" name="test: file is writable by eff. UID/GID">-w</template><template context="perl" description="Test: file is writable by real UID/GID" enabled="true" name="test: file is writable by real UID/GID">-W</template><template context="perl" description="Test: file is executable by eff. UID/GID" enabled="true" name="test: file is executable by eff. UID/GID">-x</template><template context="perl" description="Test: file is executable by real UID/GID" enabled="true" name="test: file is executable by real UID/GID">-X</template><template context="perl" description="Test: file exists" enabled="true" name="test: file exists">-e</template><template context="perl" description="Test: file handle opened to a tty" enabled="true" name="test: file handle opened to a tty">-t</template><template context="perl" description="Test: file is owned by eff. UID" enabled="true" name="test: file is owned by eff. UID">-o</template><template context="perl" description="Test: file is owned by real UID" enabled="true" name="test: file is owned by real UID">-O</template><template context="perl" description="Test: file has setgid bit set" enabled="true" name="test: file has setgid bit set">-g</template><template context="perl" description="Test: file has setuid bit set" enabled="true" name="test: file has setuid bit set">-u</template><template context="perl" description="Test: file has sticky bit set" enabled="true" name="test: file has sticky bit set">-k</template><template context="perl" description="Test: file has nonzero size" enabled="true" name="test: file has nonzero size">-s</template><template context="perl" description="Test: file has zero size" enabled="true" name="test: file has zero size">-z</template><template context="perl" description="Quote the next metacharacter" enabled="true" name="regex \">\</template><template context="perl" description="Match the beginning of the line" enabled="true" name="regex ^">^</template><template context="perl" description="Match any character (except newline)" enabled="true" name="regex .">.</template><template context="perl" description="Match the end of the line (or before newline at the end)" enabled="true" name="regex $">$$</template><template context="perl" description="Alternation" enabled="true" name="regex |">|</template><template context="perl" description="Grouping" enabled="true" name="regex ()">()</template><template context="perl" description="Character class" enabled="true" name="regex []">[]</template><template context="perl" description="Match 0 or more times" enabled="true" name="regex *">*</template><template context="perl" description="Match 1 or more times" enabled="true" name="regex +">+</template><template context="perl" description="Match 1 or 0 times" enabled="true" name="regex ?">?</template><template context="perl" description="Match exactly n times" enabled="true" name="regex {n}">{n}</template><template context="perl" description="Match at least n times" enabled="true" name="regex {n,}">{n,}</template><template context="perl" description="Match at least n but not more than m times" enabled="true" name="regex {n,m}">{n,m}</template><template context="perl" description="Match 0 or more times" enabled="true" name="regex *?">*?</template><template context="perl" description="Match 1 or more times" enabled="true" name="regex +?">+?</template><template context="perl" description="Match 0 or 1 time" enabled="true" name="regex ??">??</template><template context="perl" description="Match exactly n times" enabled="true" name="regex {n}?">{n}?</template><template context="perl" description="Match at least n times" enabled="true" name="regex {n,}?">{n,}?</template><template context="perl" description="Match at least n but not more than m times" enabled="true" name="regex {n,m}?">{n,m}?</template><template context="perl" description="tab (HT, TAB)" enabled="true" name="regex \t">\t</template><template context="perl" description="newline (LF, NL)" enabled="true" name="regex \n">\n</template><template context="perl" description="return (CR)" enabled="true" name="regex \r">\r</template><template context="perl" description="form feed (FF)" enabled="true" name="regex \f">\f</template><template context="perl" description="alarm (bell) (BEL)" enabled="true" name="regex \a">\a</template><template context="perl" description="escape (think troff) (ESC)" enabled="true" name="regex \e">\e</template><template context="perl" description="octal char (think of a PDP-11)" enabled="true" name="regex \033">\033</template><template context="perl" description="hex char" enabled="true" name="regex \x1B">\x1B</template><template context="perl" description="wide hex char (Unicode SMILEY)" enabled="true" name="regex \x{263a}">\x{263a}</template><template context="perl" description="control char" enabled="true" name="regex \c[">\c[</template><template context="perl" description="named char" enabled="true" name="regex \N{name}">\N{${name}}</template><template context="perl" description="lowercase next char (think vi)" enabled="true" name="regex \l">\l</template><template context="perl" description="uppercase next char (think vi)" enabled="true" name="regex \u">\u</template><template context="perl" description="lowercase till E (think vi)" enabled="true" name="regex \L">\L</template><template context="perl" description="uppercase till E (think vi)" enabled="true" name="regex \U">\U</template><template context="perl" description="end case modification (think vi)" enabled="true" name="regex \E">\E</template><template context="perl" description="quote (disable) pattern metacharacters till E" enabled="true" name="regex \Q">\Q</template><template context="perl" description="Match a &quot;word&quot; character (alphanumeric plus &quot;_&quot;)" enabled="true" name="regex \w">\w</template><template context="perl" description="Match a non-word character" enabled="true" name="regex \W">\W</template><template context="perl" description="Match a whitespace character" enabled="true" name="regex \s">\s</template><template context="perl" description="Match a non-whitespace character" enabled="true" name="regex \S">\S</template><template context="perl" description="Match a digit character" enabled="true" name="regex \d">\d</template><template context="perl" description="Match a non-digit character" enabled="true" name="regex \D">D</template><template context="perl" description="Match P, named property.  Use p{Prop} for longer names." enabled="true" name="regex \pP">\pP</template><template context="perl" description="Match non-P" enabled="true" name="regex \PP">\PP</template><template context="perl" description="Match eXtended Unicode &quot;combining character sequence&quot;, equivalent to C&lt;(?:PMpM*)&gt;" enabled="true" name="regex \X">\X</template><template context="perl" description="Match a single C char (octet) even under utf8." enabled="true" name="regex \C">\C</template><template context="perl" description="Any alphanumeric, that is, an alpha or a digit." enabled="true" name="regex [:alnum:]">[:alnum:]</template><template context="perl" description="Any letter. (That's a lot more letters than you think, unless you're thinking Unicode, in which case it's still a lot.)" enabled="true" name="regex [:alpha:]">[:alpha:]</template><template context="perl" description="Any character with an ordinal value between 0 and 127." enabled="true" name="regex [:ascii:]">[:ascii:]</template><template context="perl" description="Any control character. " enabled="true" name="regex [:cntrl:]">[:cntrl:]</template><template context="perl" description="A character representing a decimal digit, such as 0 to 9. " enabled="true" name="regex [:digit:]">[:digit:]</template><template context="perl" description="Any alphanumeric or punctuation character.Any alphanumeric or punctuation character." enabled="true" name="regex [:graph:]">[:graph:]</template><template context="perl" description="A lowercase letter." enabled="true" name="regex [:lower:]">[:lower:]</template><template context="perl" description="Any alphanumeric or punctuation character or space." enabled="true" name="regex [:print:]">[:print:]</template><template context="perl" description="Any punctuation character." enabled="true" name="regex [:punct:]">[:punct:]</template><template context="perl" description="Any space character. Includes tab, newline, form feed, and carriage return.Any uppercase " enabled="true" name="regex [:space:]">[:space:]</template><template context="perl" description="Any uppercase letter" enabled="true" name="regex [:upper:]">[:upper:]</template><template context="perl" description="Any identifier character, either an alnum or underline." enabled="true" name="regex [:word:]">[:word:]</template><template context="perl" description="Any hexadecimal digit. Though this may seem silly ([0-9a-fA-F] works just fine)" enabled="true" name="regex [:xdigit:]">[:xdigit:]</template><template context="perl" description="Match a word boundary" enabled="true" name="regex \b">\b</template><template context="perl" description="Match a non-(word boundary)" enabled="true" name="regex \B">\B</template><template context="perl" description="Match only at beginning of string" enabled="true" name="regex \A">\A</template><template context="perl" description="Match only at end of string, or before newline at the end" enabled="true" name="regex \Z">\Z</template><template context="perl" description="Match only at end of string" enabled="true" name="regex \z">\z</template><template context="perl" description="Match only at pos() (e.g. at the end-of-match position of prior m//g)" enabled="true" name="regex \G">\G</template><template context="perl" description="Alteration; matches either pattern1 or pattern2" enabled="true" name="regex (pattern1|pattern2)">(${pattern1}|${pattern2})</template><template context="perl" description="This is for clustering, not capturing; it groups subexpressions like &quot;()&quot;, but doesn't make backreferences as &quot;()&quot; does." enabled="true" name="regex (?:pattern)">(?:${pattern})</template><template context="perl" description="This is for clustering, not capturing; it groups subexpressions like &quot;()&quot;, but doesn't make backreferences as &quot;()&quot; does." enabled="true" name="regex (?imsx-imsx:pattern)">(?${imsx}-${imsx}:${pattern})</template><template context="perl" description="A comment. The text is ignored." enabled="true" name="regex (?#text)">(?#${text})</template><template context="perl" description="This zero-width assertion evaluate any embedded Perl code." enabled="true" name="regex (?{code })">(?{${code}})</template><template context="perl" description="This is a &quot;postponed&quot; regular subexpression. The code is evaluated at run time, at the moment this subexpression may match." enabled="true" name="regex (??{code })">(??{${code}})</template><template context="perl" description="Zero-width negative look-ahead assertion." enabled="true" name="regex (?!pattern)">(?!${pattern})</template><template context="perl" description="Zero-width positive look-ahead assertion." enabled="true" name="regex (?=pattern)">(?=${pattern})</template><template context="perl" description="Zero-width positive look-behind assertion." enabled="true" name="regex (?&lt;=pattern)">(?&lt;=${pattern})</template><template context="perl" description="A zero-width negative look-behind assertion." enabled="true" name="regex (?&lt;!pattern)">(?&lt;!${cursor})</template><template context="perl" description="Conditional expression." enabled="true" name="regex (?(condition)yes-pattern|no-pattern)">(?(${condition})${yes-pattern}|${no-pattern}))</template><template context="perl" description="Conditional expression." enabled="true" name="regex (?(condition)yes-pattern)">(?(${condition}${yes-pattern}))</template><template context="perl" description="One or more embedded pattern-match modifiers." enabled="true" name="regex (?imsx-imsx)">(?${imsx}-${imsx})</template><template context="perl" description="Hash key containing environment variable" enabled="true" name="$ENV{$Key}">$$ENV{'${Key}'}</template><template context="perl" description="sprintf command" enabled="true" name="sprintf">my $$${Scalar} = sprintf ("${cursor}\n", ${Arguments});</template><template context="perl" description="add no critic comment" enabled="true" name="## no critic">## no critic (${CriticPolicy})</template><template context="perl" description="create a TriggerHook call" enabled="true" name="TriggerHook">TriggerHook('${HookName}', { ${HookParams} });</template></templates>